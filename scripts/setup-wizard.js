#!/usr/bin/env node

/**
 * Setup Wizard for Pix MCP Server
 * Interactive configuration helper for first-time users
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import readline from 'readline';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class SetupWizard {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    this.config = {};
  }

  async question(prompt) {
    return new Promise((resolve) => {
      this.rl.question(prompt, resolve);
    });
  }

  log(message, type = 'info') {
    const icons = {
      info: 'ℹ️ ',
      success: '✅',
      warning: '⚠️ ',
      error: '❌'
    };
    console.log(`${icons[type]} ${message}`);
  }

  async welcome() {
    console.clear();
    console.log('🎉 Welcome to Pix MCP Server Setup Wizard!\n');
    console.log('This wizard will help you configure your Pix MCP server for first use.\n');
    console.log('You will need:');
    console.log('• Efí (Gerencianet) account credentials');
    console.log('• Your Pix key (email, phone, CPF, or random key)');
    console.log('• Claude Desktop or compatible MCP client\n');
    
    const proceed = await this.question('Ready to start? (y/N): ');
    if (proceed.toLowerCase() !== 'y' && proceed.toLowerCase() !== 'yes') {
      console.log('\nSetup cancelled. Run this wizard again when you\'re ready!');
      process.exit(0);
    }
  }

  async collectCredentials() {
    console.log('\n📋 Step 1: Efí (Gerencianet) Credentials\n');
    
    console.log('If you don\'t have an Efí account yet:');
    console.log('1. Visit: https://sejaefi.com.br/');
    console.log('2. Create an account and verify your identity');
    console.log('3. Access the developer dashboard');
    console.log('4. Create a new application to get your credentials\n');

    this.config.EFI_CLIENT_ID = await this.question('Enter your Efí Client ID: ');
    
    if (!this.config.EFI_CLIENT_ID) {
      this.log('Client ID is required!', 'error');
      process.exit(1);
    }

    this.config.EFI_CLIENT_SECRET = await this.question('Enter your Efí Client Secret: ');
    
    if (!this.config.EFI_CLIENT_SECRET) {
      this.log('Client Secret is required!', 'error');
      process.exit(1);
    }

    console.log('\n🔧 Environment Configuration\n');
    
    const useSandbox = await this.question('Use sandbox environment for testing? (Y/n): ');
    this.config.EFI_SANDBOX = useSandbox.toLowerCase() !== 'n' && useSandbox.toLowerCase() !== 'no' ? 'true' : 'false';
    
    const port = await this.question('Server port (default: 3000): ');
    this.config.PORT = port || '3000';
    
    const nodeEnv = await this.question('Node environment (development/production, default: development): ');
    this.config.NODE_ENV = nodeEnv || 'development';
  }

  async generateEnvFile() {
    console.log('\n📝 Step 2: Creating .env file\n');
    
    const envPath = path.join(__dirname, '../.env');
    const envContent = `# Efí (Gerencianet) Configuration
EFI_CLIENT_ID=${this.config.EFI_CLIENT_ID}
EFI_CLIENT_SECRET=${this.config.EFI_CLIENT_SECRET}
EFI_SANDBOX=${this.config.EFI_SANDBOX}

# Server Configuration
PORT=${this.config.PORT}
NODE_ENV=${this.config.NODE_ENV}

# Generated by setup wizard on ${new Date().toISOString()}
`;

    try {
      if (fs.existsSync(envPath)) {
        const overwrite = await this.question('.env file already exists. Overwrite? (y/N): ');
        if (overwrite.toLowerCase() !== 'y' && overwrite.toLowerCase() !== 'yes') {
          this.log('Keeping existing .env file', 'info');
          return;
        }
      }

      fs.writeFileSync(envPath, envContent);
      this.log('.env file created successfully!', 'success');
    } catch (error) {
      this.log(`Failed to create .env file: ${error.message}`, 'error');
      process.exit(1);
    }
  }

  async generateMcpConfig() {
    console.log('\n🔗 Step 3: MCP Client Configuration\n');
    
    const generateConfig = await this.question('Generate Claude Desktop configuration? (Y/n): ');
    
    if (generateConfig.toLowerCase() === 'n' || generateConfig.toLowerCase() === 'no') {
      this.log('Skipping MCP configuration generation', 'info');
      return;
    }

    const mcpConfig = {
      mcpServers: {
        'pix-mcp': {
          command: 'pix-mcp',
          env: {
            EFI_CLIENT_ID: this.config.EFI_CLIENT_ID,
            EFI_CLIENT_SECRET: this.config.EFI_CLIENT_SECRET,
            EFI_SANDBOX: this.config.EFI_SANDBOX
          }
        }
      }
    };

    const configPath = path.join(__dirname, '../claude_desktop_config.json');
    
    try {
      fs.writeFileSync(configPath, JSON.stringify(mcpConfig, null, 2));
      this.log('Claude Desktop configuration created!', 'success');
      
      console.log('\n📋 To use with Claude Desktop:');
      console.log('1. Copy the generated claude_desktop_config.json content');
      console.log('2. Paste it into your Claude Desktop configuration file:');
      console.log('   • macOS: ~/Library/Application Support/Claude/claude_desktop_config.json');
      console.log('   • Windows: %APPDATA%\\Claude\\claude_desktop_config.json');
      console.log('3. Restart Claude Desktop');
      
    } catch (error) {
      this.log(`Failed to create MCP configuration: ${error.message}`, 'error');
    }
  }

  async testSetup() {
    console.log('\n🧪 Step 4: Testing Configuration\n');
    
    const runTest = await this.question('Run configuration validation? (Y/n): ');
    
    if (runTest.toLowerCase() === 'n' || runTest.toLowerCase() === 'no') {
      this.log('Skipping validation test', 'info');
      return;
    }

    this.log('Running validation...', 'info');
    
    try {
      // Import and run validation
      const { spawn } = await import('child_process');
      
      const validationProcess = spawn('npm', ['run', 'validate'], {
        cwd: path.join(__dirname, '..'),
        stdio: 'inherit'
      });

      validationProcess.on('close', (code) => {
        if (code === 0) {
          this.log('Validation passed!', 'success');
        } else {
          this.log('Validation found issues. Check the output above.', 'warning');
        }
      });

    } catch (error) {
      this.log(`Validation test failed: ${error.message}`, 'error');
    }
  }

  async showNextSteps() {
    console.log('\n🎯 Setup Complete!\n');
    
    console.log('✅ What was configured:');
    console.log('• Environment variables (.env file)');
    console.log('• MCP client configuration');
    console.log('• Validation completed\n');
    
    console.log('🚀 Next steps:');
    console.log('1. Install globally: npm install -g pix-mcp-server');
    console.log('2. Configure your MCP client (Claude Desktop, Cursor, etc.)');
    console.log('3. Test with: "Create a Pix charge for R$ 10.00 for Test User"');
    console.log('4. Check health: Use the healthCheck tool\n');
    
    console.log('📚 Documentation:');
    console.log('• Installation guide: INSTALLATION.md');
    console.log('• API reference: API.md');
    console.log('• Troubleshooting: README.md\n');
    
    console.log('🆘 Need help?');
    console.log('• GitHub Issues: https://github.com/your-org/pix-mcp-server/issues');
    console.log('• Documentation: https://github.com/your-org/pix-mcp-server\n');
    
    console.log('Thank you for using Pix MCP Server! 🎉');
  }

  async run() {
    try {
      await this.welcome();
      await this.collectCredentials();
      await this.generateEnvFile();
      await this.generateMcpConfig();
      await this.testSetup();
      await this.showNextSteps();
    } catch (error) {
      this.log(`Setup failed: ${error.message}`, 'error');
      process.exit(1);
    } finally {
      this.rl.close();
    }
  }
}

// Run the wizard
const wizard = new SetupWizard();
wizard.run().catch(error => {
  console.error('❌ Setup wizard failed:', error.message);
  process.exit(1);
});
